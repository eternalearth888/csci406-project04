April 25, 2013
=============================================
For all:
- assume we get all the processing tasks from the file to begin with
- machines is a variable that is an array
	- contains the machine speeds for a respective machine
	- index 0 would be the first machine
- tasks is a variable that is an array
	- contains the time it would take to complete the respective
	- index 0 would be the time it takes to complete the first given task
/**GENERAL PSEUDOCODE TO SEE WHICH ONE WOULD BE HARDEST TO IMPLEMENT**/
=============================================
(a)
# include the quicksort library to sort tasks from least to greatest value
sort(tasks)

for i = 0 to tasks.size 
	assign task i to machines at the index (i % machine.count) 
end

sum up all the times for each machine
then divide the summed time by its respective machine speeds (best)
find the max of best

return that max
---------------------------------------------
Advantage: Is timely, easy to implement 
Disadvantage: Wrong, certain data sets could really punish it
				ex: say we have task 1,2,3,400 and machines 1,2,300
					machine 1 would be assigned to 400 task
					going the reverse way, causes the same issue (not much workaround)
Other possibilities: add "squeeze" - harder to implement but more reliable
=============================================
(b)
# include the quicksort library to sort tasks from least to greatest value
sort(tasks)

tasks [3,10,17,20,50] = 100
machines [4,6] = 10

machineSum = sum up the machine's speeds and then find their ratio
	ex: machine 0's ratio is 4/10 

taskSum = sum up the tasks

machineNum = 0

for i = 0 to tasks.size 
	if tasks[i]+machines[machineNum] <= taskSum/machineRatio
		add the task to the machine, machine[machineNum]
	elsif last machine
		add the rest of the tasks to the last machine
	else
		machineNum++
	end
end
---------------------------------------------
Advantage: More correct than previous in most cases, works for random data sets better, not too difficult to implement
Disadvantage: There are still cases where you are assigning to much to the last machine
=============================================
(c) #computational heavy because it processes as it goes

currentWorstTime = 0

for i = 0 to tasks.size
	for j = 0 to machines.size
		if assigning this task doesn't' make the currentWorstTime increase
			assign it to that respective machine
		end
	end

	if task[i] was not assigned to a machine
		lowestIncrease = 1000000
		lowestMachine = 0
		for k = 0 to machines.size
			if (task[i]/machine[k].speed < lowestIncrease)
				lowestIncrease = task[i]/machine[k].speed
				lowestMachine = k
			end
		end
		currentWorstTime = currentWorstTime + task[i]/lowestIncrease
		assign task[i] to machine[lowestMachine]
	end
end

return currentWorstTime;
---------------------------------------------
Advantage: a greedy approach that will, like TSP NN, in nearly every random set will produce an almost optimal answer
Disadvantage: it has to be O(n*m^2) and the most difficult to implement
